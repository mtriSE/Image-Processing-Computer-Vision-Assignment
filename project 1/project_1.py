# -*- coding: utf-8 -*-
"""Project 1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IT2W-Whjp1FlkV7V_omp66DBe6fX_QhA

# Tách ảnh xám từ ảnh màu và ngược lại, kết hợp các channel màu để tạo ảnh màu từ các ảnh xám

# Chuyển đổi từ ảnh màu sang ảnh xám

## Hiện thực

Thêm các thư viện cần thiết
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import numpy as np

"""Load các hình ảnh vào bằng thư viện matplotlib và kiểm tra thông tin của ảnh."""

image = plt.imread('../cambridge/043.jpg')
print(f'image shape: {image.shape}')
print(f'image type: {image.dtype}')

"""Có thể thấy, bức ảnh là một np.ndarray có kích thước 512x512 là độ dài rộng theo pixel và có 3 kênh màu. Ngoài ra, khi kiểm tra dtype của hình ảnh, nhận được kết quả là unit8 chứng tỏ đây là một bức ảnh màu 8-bit."""

def showImage(image,cmap=None):
  plt.figure()
  plt.imshow(image) if cmap is None else plt.imshow(image,cmap='gray')
  plt.show()

showImage(image)

"""Ta có 3 phương pháp để tách ảnh xám từ ảnh màu:
1. Lightness method: lấy giá trị trung bình của các thành phần có giá trị cao nhất và thấp nhất $$grayscale = \frac{max(RGB) + min(RGB)}{2}$$
2. Average method: Chỉ đơn giản là lấy trung bình cả 3 thành phần RGB $$grayscale = \frac{R+G+B}{3}$$
3. Luminosity Method: Sử dụng các tỉ lệ khác nhau cho từng thành phần RGB để phù hợp với mắt người. Ở BTL này sẽ sử dụng công thức [NTSC](https://en.wikipedia.org/wiki/NTSC) $$grayscale = 0.299*R + 0.587*G + 0.114*B$$

### Lightness method
"""

lightness_method_img = np.max(image,axis=-1,keepdims=1)/2 + np.min(image,axis=-1,keepdims=1)/2

"""### Average method"""

average_method_img = np.sum(image, axis=-1)/3

"""### Luminosity method"""

luminosity_method_img = 0.3*image[:,:,0] + 0.59*image[:,:,1] + 0.11*image[:,:,2]

fig,ax = plt.subplots(2,2,figsize=(12,12), layout='tight')
ax[0,0].imshow(image)
ax[0,0].set_title('Original image')
ax[0,1].imshow(lightness_method_img,cmap='gray')
ax[0,1].set_title('Lightness method image')
ax[1,0].imshow(average_method_img, cmap='gray')
ax[1,0].set_title('Average method image')
ax[1,1].imshow(luminosity_method_img, cmap='gray')
ax[1,1].set_title('Luminosity method image')
fig.show()

"""## Nhận xét

Các kết quả có sự khác nhau về thể hiện độ sáng/tối (dễ thấy nhất ở đoạn chữ "Cambridge" trên xe). Ở phương pháp lightness thì thể hiện không rõ nhất, rồi đến phương pháp average, vì mắt người nhận diện các màu sắc khác nhau mà phương pháp này thì gán trọng số bằng nhau cho các màu nên độ sáng/tối ở phương pháp này sẽ không tốt bằng phương pháp luminosity, phương pháp này gán các trọng số khác nhau cho từng thành phần màu vì mắt người thì nhạy cảm hơn với màu green, rồi tới red, và cuối cùng là blue.

# Kết hợp các channel màu để tạo ảnh màu từ các ảnh xám

Vì không có dataset về ảnh với riêng biệt về các channel nên ở bài này, ta cần tách ra 3 ảnh tương ứng với 3 channel của một ảnh màu để dễ kiểm chứng kết quả.
"""

origin_color_image = plt.imread('../cambridge/043.jpg')
showImage(origin_color_image)

"""Bản chất của ảnh màu là chồng (stack) các ảnh với các channel khác nhau."""

R_channel_image = origin_color_image[:,:,0]   # keep only Red channel
G_channel_image = origin_color_image[:,:,1]   # keep only Green channel
B_channel_image = origin_color_image[:,:,2]   # keep only Blue channel
print(f'R_channel_image.shape: {R_channel_image.shape}')
print(f'G_channel_image.shape: {G_channel_image.shape}')
print(f'B_channel_image.shape: {B_channel_image.shape}')

fig, axs = plt.subplots(2,2, layout='tight', figsize=(10,10))
axs[0,0].imshow(origin_color_image)
axs[0,0].set_title('Original')
axs[0,1].imshow(R_channel_image,cmap='gray')
axs[0,1].set_title('Only red channel')
axs[1,0].imshow(G_channel_image,cmap='gray')
axs[1,0].set_title('Only green channel')
axs[1,1].imshow(B_channel_image,cmap='gray')
axs[1,1].set_title('Only blue channel')
fig.show()


generated_color_image = np.stack([R_channel_image,G_channel_image,B_channel_image],axis=-1)
fig, axs = plt.subplots(1,2, figsize=(10,10),layout='tight')
axs[0].imshow(origin_color_image)
axs[0].set_title('Original Image')
axs[1].imshow(generated_color_image)
axs[1].set_title('Generated Image')
fig.show()